%% MPA pipeline (Phase-modulated amplitude)

%% Part 1: Behavioral processing

clear 
close all
clc

srate = 1000;
tmax = 390; % time length in seconds

% Design settings
ndyads  = 14;
nsubs   = 2;
nconds  = 4;
ncycles = 10;
nchans  = 64;
nsteps  = 64; % Number of chosen metronome's steps


path_home = '/Users/mattiaipem/Documents/IPEM/Projects/Drifting_Metronomes/Paper1_analyses'; % set path

% Load data
cd(path_home);



% Load behavioral data
load onsets_debounced

% Pre-allocate interpolated timeseries (to guarantee same vector length)
[sine_s1, sine_s2, saw_s1, saw_s2]  = deal(nan( srate*tmax, 14, nconds));
[ioi_s1, ioi_s2] = deal(cell(14,nconds)); 

% Load raw data (de-bounced tapping onsets)

load onsets_metronomes.mat
load onsets_debounced.mat

% Interpolate metronome1
cd('/Users/mattiaipem/Documents/IPEM/Projects/Drifting_Metronomes/Paper1_analyses');
[~, saw_m1] = interpolate_onsets(onsets_metro1); % interpolate sinewave
% Repeat for metronome2
[~, saw_m2] = interpolate_onsets(onsets_metro2); % interpolate sinewave

%Process input data      
for dyadi= 1:ndyads
    for condi=1:nconds
        display(['Processing dyad = ' num2str(dyadi)]); display(['condition = ' num2str(condi)]);
                    
        
        
         % Interpolate subject1
        [sine_s1(:,dyadi,condi), saw_s1(:,dyadi,condi)] = interpolate_onsets(onsets_debounced(dyadi).sub1{condi}); % interpolate sinewave
        % Repeat for subject2
        [sine_s2(:,dyadi,condi), saw_s2(:,dyadi,condi)] = interpolate_onsets(onsets_debounced(dyadi).sub2{condi}); % interpolate sinewave
        
        %Inter-onsets intervals
        ioi_s1{dyadi,condi} = diff(onsets_debounced(dyadi).sub1{condi});
        ioi_s2{dyadi,condi} = diff(onsets_debounced(dyadi).sub2{condi});
    end
end
       


%% Part 2: EEG

% Initialize variables for cross-frequency coupling
cfc_pow = [];      % power (EEG high-frequency component)
cfc_phase = [];    % phase (behavioral low-frequency modulator)

% % Gaussian filter
% % Specify frequency bands for phase and amplitude
% freq4phase = 1.653; % Modulator
% freq4power = 20; % Target; make sure it matches the dataset!!
% fwhm = 4; %full width at half-maximum (Gaussian)

% Plateau filter
targetfrex = 20;
frange      = [targetfrex-2 targetfrex+2];   %frequency range
trans_width = .15; %percentage for transition zone (slope cut-off)
filt_ord    = 10; %filter order


% Load eeg data (make sure it matches with filter's band)
cd('/Volumes/G-DRIVE USB-C/eegData/Drifting_metronomes')
load('posterior_alpha_c1');
% Rename conditions (for plotting)
condlabels = {'Visually Coupled' , 'Visually Uncoupled' , 'Auditorily Coupled ' , 'Auditorily Uncoupled'};


% Set bins for final output
nbins = 36 + 1; % set one in excess, for incoming loop
% MPA with self vs other
who_labels = {'Self' , 'Other'};
nwhos = length(who_labels);

% Set directory
cd('/Users/mattiaipem/Documents/IPEM/Projects/Drifting_Metronomes/EEG/scripts')

for whoi = 1:nwhos % self & other
    
    % Initialize temporary outputs (to assign to MPA variable)
    [pow_by_phase,pow_by_phase_attr,pow_by_phase_repl] = deal( zeros(nbins,ndyads,nsubs,nconds) );
    

    % Compute power and phase timeseries
    for dyadi = 1:ndyads
        disp(['CFC Dyad #' num2str(dyadi) ' : coupled with ' who_labels{whoi}])
        for subi = 1:nsubs  
            for condi = 1:nconds
%figure(dyadi)
                % Reshape to long format
                cfc_pow = reshape(compts{dyadi,subi,condi},[],1); 
                % Filter concatenated cycles at once
                cfc_pow = filter_plateau (cfc_pow', srate, frange, trans_width, filt_ord, 1)'; %Plateau-shaped filter
                % Compute power
                cfc_pow = abs(hilbert(cfc_pow)).^2;   
%subplot(2,2,condi)
%plot(cfc_pow,'r','LineWidth',1) , hold on
%                 % Smooth timeseries with moving median
%                 cfc_pow = movmedian(cfc_pow,1*srate);
                % Remove extreme values
                cfc_pow( cfc_pow > mean(cfc_pow)+3*std(cfc_pow) ) = nan;

%plot(cfc_pow,'k','LineWidth',1.5)
%title(condlabels{condi})
                % Reshape to 10 cycles format
                cfc_pow = reshape(cfc_pow,[],10); 
                
                % Get phase values from modulating frequency
                % Pick partner's or self phase (Behavior)
                if whoi ==1
                    % Couple with self-generated behavior
                    if subi == 2 
                    cfc_phase = saw_s2(:,dyadi,condi);
                    else
                        cfc_phase = saw_s1(:,dyadi,condi);
                    end
                    % Re-wrap from -pi to +pi
                    cfc_phase = wrapToPi(cfc_phase);
                else
                    % Couple with behavior generated by the partner
                    if subi == 1 
                    cfc_phase = saw_s2(:,dyadi,condi);
                    else
                        cfc_phase = saw_s1(:,dyadi,condi);
                    end
                    % Re-wrap from -pi to +pi
                    cfc_phase = wrapToPi(cfc_phase);

                end
                % Reshape to 10 cycles format
                cfc_phase = reshape(cfc_phase,[],10); 


                %       
                % Solve misalignment 
                %(actually, last part of data are NaNs... not a big deal)
                cfc_pow = cfc_pow(1:length(cfc_phase),:);


%                 % Define attractor/repellor regions over cycle timeline
%                 % NB: this depends striclty on phase wrapping.
%                 idx_attr = length(cfc_pow)/4+1:3*length(cfc_pow)/4; %attractor indexes (around in-phase)
%                 idx_repl = [1:length(cfc_pow)/4 , 3*length(cfc_pow)/4+1:length(cfc_pow)]; %repellor indexes (around anti-phase)

%                 % Assign datatpoints on attractor 
%                 pow_attr   = cfc_pow(idx_attr,:);   
%                 phase_attr = cfc_phase(idx_attr,:);
%                  % Assign datatpoints on repellor
%                 pow_repl   = cfc_pow(idx_repl,:);   
%                 phase_repl = cfc_phase(idx_repl,:);
% 

                % Compute power-by-phase modulation
                phase_edges = linspace(min(min(cfc_phase)),max(max(cfc_phase)),nbins+1); %keep soft-coded, in case of re-wrapping
                for i=1:nbins-1

                    % Compute modulation over all run
                    thisbin = cfc_pow(cfc_phase>phase_edges(i) & cfc_phase<phase_edges(i+1)); %assign power within phase bin 
                    %thisbin( abs(thisbin) > mean(abs(thisbin))+3*std(abs(thisbin)) ) = nan; %remove outliers within bin
                    pow_by_phase(i,dyadi,subi,condi) = median(thisbin , 'omitnan'); %compute mean

%                     % Compute modulation on attractor
%                     pow_by_phase_attr(i,dyadi,subi,condi) = mean(pow_attr(phase_attr>phase_edges(i) & phase_attr<phase_edges(i+1)) , 'omitnan'); % assign to attractor
% 
%                     % Compute modulation on repellor
%                     pow_by_phase_repl(i,dyadi,subi,condi) = mean(pow_repl(phase_repl>phase_edges(i) & phase_repl<phase_edges(i+1)) , 'omitnan'); 

                end

            % Store power timeseries for further computation of coherence
            pow_ts(:,dyadi,subi,condi) = reshape(cfc_pow,[],1);

            end
        end

    end

    % Re-shape output to N = 28, and remove last 0 in the series
    pow_by_phase = squeeze( reshape( pow_by_phase(1:end-1,:,:,:), nbins-1,[],1,nconds ) );
%     pow_by_phase_attr  = reshape( pow_by_phase_attr(1:end-1,:,:,:), size(pow_by_phase) );
%     pow_by_phase_repl  = reshape( pow_by_phase_repl(1:end-1,:,:,:), size(pow_by_phase) );
    
    % Final assignment to Self/Other
    mpa{whoi} = pow_by_phase;
%     mpa_attr{whoi} = pow_by_phase_attr;
%     mpa_repl{whoi} = pow_by_phase_repl;

end



% Visualize modulation 
% TODO: introduce Audio conditions -> subplot()


% Visualize all subjects
for subi = 1:ndyads*nsubs

    figure(subi), clf
    for condi = 1:nconds

        subplot(2,2,condi)
        hold on
        plot( mpa{1}(:,subi,condi) , 'LineWidth', 1.3) % self   
        plot( mpa{2}(:,subi,condi) , 'LineWidth', 1.3) % other   
        xline(round(length(mpa{whoi})/2),'k:');
        yline(mean(mpa{1}(:,subi,condi)),'b--');
        yline(mean(mpa{2}(:,subi,condi)),'r--'); 
        ylim([min(min(mpa{1}(:,subi,:))) max(max(mpa{1}(:,subi,:)))])
        xticks([1 round(length(mpa{whoi})/2) length(mpa{whoi})])
        xticklabels({'-\pi','0','\pi'})
        xlabel('Movement Phase (rad)') , ylabel('Beta power (\muV^2)')
        title(condlabels{condi})
        legend(who_labels)
        axis square
        sgtitle("Beta modulation")
    end

end

%%
% Visualize average (and standard error)

[mpaGravg,mpaSe] = deal(zeros(nwhos,nbins-1,nconds));
smth = 7; %smoothing factor

figure(ndyads*nsubs+1), clf
for condi = 1:nconds
    
    % Compute average and 
    for whoi = 1:nwhos
        mpaGravg(whoi,:,condi) = squeeze(mean( mpa{whoi}(:,:,condi),2));
        mpaSe(whoi,:,condi) = std(mpa{whoi}(:,:,condi),0,2)/sqrt(ndyads*nsubs);
    end
    
    subplot(2,2,condi)
    hold on
    % Whole cycle
    errorbar(smooth(mpaGravg(1,:,condi),smth), mpaSe(1,:,condi)/2, 'LineWidth', 1.4) % self  
    errorbar(smooth(mpaGravg(2,:,condi),smth), mpaSe(2,:,condi)/2, 'LineWidth', 1.4) % other  
%     plot( smooth(mpaGravg(1,:,condi),smth) , 'LineWidth', 1.7) % self   
%     plot( smooth(mpaGravg(2,:,condi),smth) , 'LineWidth', 1.7) % other   
    xline(round(length(mpa{whoi})/2),'k:' , 'LineWidth', 1);
%     yline(mean(mpaGravg(1,:,condi)),'b--' , 'LineWidth', 1.2);
%     yline(mean(mpaGravg(2,:,condi)),'r--' , 'LineWidth', 1.2); 
    ylim([.22 .28])
    ylim([min(mpaGravg(1,:,condi))-.05*min(mpaGravg(1,:,condi))  max(mpaGravg(1,:,condi))+.05*max(mpaGravg(1,:,condi))])
    xlim([0 length(mpaGravg)])
    xticks([1 round(length(mpa{whoi})/2) length(mpa{whoi})])
    xticklabels({'-\pi','0','\pi'})
    xlabel('Movement Phase (rad)') , ylabel('Beta power (\muV^2)')
    title(condlabels{condi})
    legend(who_labels)
    axis square
    sgtitle("Beta modulation")
end






% % Visualize attractor/repellor
% for subi = 1:ndyads*nsubs
% figure(subi), clf
% for condi = 1:nconds
%     
%     % Self
%     subplot(2,4,condi)
%     hold on
%     % Whole cycle
%     plot(mpa{1}(:,subi,condi), 'bo' , 'MarkerFaceColor' , 'k') 
%     % In-phase region
%     plot(mpa_attr{1}(:,subi,condi), 'b.' ) 
%     % Anti-phase region
%     plot(mpa_repl{1}(:,subi,condi), 'b--') 
%     xline(round(length(mpa_attr{whoi}/2)),'k--'); 
%     %ylim([ min([ min(min(mpa_attr{1}(:,subi,1:2))),min(min(mpa_repl{1}(:,subi,1:2))) ]) , max([ max(max(mpa_attr{1}(:,subi,1:2))),max(max(mpa_repl{1}(:,subi,1:2))) ]) ])    
%     xticks([1 round(length(mpa_attr{whoi})/2) , length(mpa_attr{whoi})])
%     xticklabels({'-\pi','0','\pi'})
%     xlabel('Movement Phase') , ylabel('MPA')
%     title([condlabels{condi} " - 'Self'"])
%     %legend({'Whole cycle','In-phase region','Anti-phase region'})
%     axis square
%     
%     % Other
%     subplot(2,4,condi+4)
%     hold on
%     % Whole cycle
%     plot(mpa{2}(:,subi,condi), 'ro' , 'MarkerFaceColor' , 'k') 
%     % In-phase region
%     plot(mpa_attr{2}(:,subi,condi), 'r.' ) 
%     % Anti-phase region
%     plot(mpa_repl{2}(:,subi,condi), 'r--') 
%     xline(round(length(mpa_attr{whoi}/2)),'k--');
%     %ylim([ min([ min(min(mpa_attr{2}(:,subi,1:2))),min(min(mpa_repl{2}(:,subi,1:2))) ]) , max([ max(max(mpa_attr{2}(:,subi,1:2))),max(max(mpa_repl{2}(:,subi,1:2))) ]) ])    
%     xticks([1 round(length(mpa_attr{whoi})/2) , length(mpa_attr{whoi})])
%     xticklabels({'-\pi','0','\pi'})
%     xlabel('Movement Phase') , ylabel('MPA')
%     title([condlabels{condi} " - 'Other'"])
%     %legend({'Whole cycle','In-phase region','Anti-phase region'})
%     axis square
%     
%     sgtitle("Beta modulation - in-phase/anti-phase")
% end
% end
% 


% % Visualize attractor/repellor
% figure, clf
% for condi = 1:nconds
%     
%     % Self
%     subplot(2,2,condi)
%     hold on
%     % Whole cycle
%     plot(mean(mpa{1}(:,:,condi),2), 'bo' , 'MarkerFaceColor' , 'k') 
%     % In-phase region
%     plot(mean(mpa_attr{1}(:,:,condi),2), 'b.' ) 
%     % Anti-phase region
%     plot(mean(mpa_repl{1}(:,:,condi),2), 'b--') 
%         xline(round(length(mpa_attr{whoi}/2)),'k--');
%     %ylim([0.29 0.325]) %TODO: reshape in 1 dimension, pick min and max
%     xticks([1 round(length(mpa_attr{whoi})/2) , length(mpa_attr{whoi})])
%     xticklabels({'-\pi','0','\pi'})
%     xlabel('Movement Phase') , ylabel('MPA')
%     title([condlabels{condi} " - 'Self'"])
%     legend({'Whole cycle','In-phase region','Anti-phase region'})
%     axis square
%     
%     % Other
%     subplot(2,2,condi)
%     hold on
%     % Whole cycle
%     plot(mean(mpa{2}(:,:,condi),2), 'ro' , 'MarkerFaceColor' , 'k') 
%     % In-phase region
%     plot(mean(mpa_attr{2}(:,:,condi),2), 'r.' ) 
%     % Anti-phase region
%     plot(mean(mpa_repl{2}(:,:,condi),2), 'r--') 
%     xline(round(length(mpa_attr{whoi}/2)),'k--');
%     %ylim([0.324 0.336])
%     xticks([1 round(length(mpa_attr{whoi})/2) , length(mpa_attr{whoi})])
%     xticklabels({'-\pi','0','\pi'})
%     xlabel('Movement Phase') , ylabel('MPA')
%     title([condlabels{condi} " - 'Other'"])
%     legend({'Whole cycle','In-phase region','Anti-phase region'})
%     axis square
%     
%     sgtitle("Beta modulation - in-phase/anti-phase")
% end


% Save output for R

% concatenate conditions, and rotate
% pow_by_phase = squeeze( reshape( pow_by_phase, nbins-1, [], 1 ) )';
% cd('/Users/mattiaipem/Desktop/Hyperscanning_data/R_analyses')
% writematrix(pow_by_phase ,  'tempMPA.xlsx'); %NB: always delete file in folder before saving


%% Sinusoudal fit

% Build distribution of sine amplitudes

% Initialize output
% Sine amplitude, phase shift, DC offset (aka intercept, aka sine mean value)
[sAmpl, pShift , dcOff] = deal(zeros(nwhos,ndyads*nsubs,nconds));



for whoi = 1:nwhos
%     
%     % Remove 2 participants from dyad4
%     mpa{whoi}(:,4+ndyads,:) = []; 
%     mpa{whoi}(:,4,:) = []; %remove 2 participants from dyad2
%     
    for condi = 1:nconds
        for subi = 1:ndyads*nsubs
            
            %Initialize temporal variable (reset within loop)
            tempParam = [];
            % Compute sine parameters (offset, amplitude, frequency,
            % phaseshift, MSE)
            [tempParam]= sineFit(1:nbins-1,mpa{whoi}(:,subi,condi)' , 0); % last argument suppressess output figure
            % Assign amplitude to output matrix
            sAmpl(whoi,subi,condi) = tempParam(2);
            pShift(whoi,subi,condi) = tempParam(4);
            dcOff(whoi,subi,condi) = tempParam(1);
 
        end
    end
end

% Set Zeros To ?NaN?
sAmpl(sAmpl   == 0) = NaN;                              
pShift(pShift == 0) = NaN; 
dcOff(dcOff   == 0) = NaN; 

% Plot distribution of sine amplitude
figure , clf
for whoi = 1:nwhos
    
    subplot(211)
    hold on
    plot(log(sAmpl(whoi,:,1)),'x')
    yline(mean(log(sAmpl(whoi,:,1)),2,'omitnan'));
    title(condlabels{1})
    subplot(212)
    hold on
    plot(log(sAmpl(whoi,:,2)),'x')
    yline(mean(log(sAmpl(whoi,:,2)),2,'omitnan'));
    title(condlabels{2})
    sgtitle('Sine amplitude')

end

% Plot distribution of phase shifts
%pShift = wrapToPi(pShift); %TRYOUT

figure , clf
for whoi = 1:nwhos
    
    subplot(211)
    hold on
    plot(pShift(whoi,:,1),'x')
    yline(mean(pShift(whoi,:,1),2,'omitnan'));
    title(condlabels{1})
    subplot(212)
    plot(pShift(whoi,:,2),'x')
    hold on
    yline(mean(pShift(whoi,:,2),2,'omitnan'));
    title(condlabels{2})
    sgtitle('Sine phase-shift')

end

figure , clf
for whoi = 1:nwhos
    
    subplot(211)
    hold on
    plot(dcOff(whoi,:,1),'x')
    yline(mean(dcOff(whoi,:,1),2,'omitnan'));
    title(condlabels{1})
    subplot(212)
    plot(dcOff(whoi,:,2),'x')
    hold on
    yline(mean(dcOff(whoi,:,2),2,'omitnan'));
    title(condlabels{2})
    sgtitle('Sine offset')

end

% Visualize averages and error bars ('interpret ANOVA results')
% TODO: DOUBLE-CHECK errorbar()

figure(50),clf
subplot(121)
errorbar([mean(log(sAmpl(1,:,1))),mean(log(sAmpl(1,:,2)))],[ std(log(sAmpl(1,:,1)))/sqrt(nsubs*ndyads)/2 , std(log(sAmpl(1,:,2)))/sqrt(nsubs*ndyads)/2],'o-','LineWidth',1.5)
hold on
errorbar([mean(log(sAmpl(2,:,1))),mean(log(sAmpl(2,:,2)))],[std(log(sAmpl(2,:,1)))/sqrt(nsubs*ndyads)/2 , std(log(sAmpl(2,:,2)))/sqrt(nsubs*ndyads)/2],'o-','LineWidth',1.5)
xlim([.5 2.5])
legend(who_labels)
xticks([1 2])
xticklabels({'Coupled','Uncoupled'})
ylim([-4.5 -3.5]) % hard-codedylabel('Sine amplitude (log scale)')
ylabel('Sine amplitude (log scale)')
axis square
title('Visual Coupling')

subplot(122)
errorbar([mean(log(sAmpl(1,:,3))),mean(log(sAmpl(1,:,4)))],[std(log(sAmpl(1,:,3)))/sqrt(nsubs*ndyads)/2 , std(log(sAmpl(1,:,4)))/sqrt(nsubs*ndyads)/2],'o-','LineWidth',1.7)
hold on
errorbar([mean(log(sAmpl(2,:,3))),mean(log(sAmpl(2,:,4)))],[std(log(sAmpl(2,:,3)))/sqrt(nsubs*ndyads)/2 , std(log(sAmpl(2,:,4)))/sqrt(nsubs*ndyads)/2],'o-','LineWidth',1.7)
xlim([.5 2.5])
legend(who_labels)
xticks([1 2])
xticklabels({'Coupled','Uncoupled'})
ylim([-4.5 -3.5]) % hard-coded
ylabel('Sine amplitude (log scale)')
axis square
title('Auditory Coupling')



% Output for R - Levels:
% Self Coupled Visual
% Other Coupled Visual 
% Self Uncoupled Visual
% Other uncoupled Visual
% Self Coupled Audio
% Other Coupled Audio
% Self Uncoupled Audio
% Other uncoupled Audio

out2r = [sAmpl(1,:,1)';sAmpl(2,:,1)';sAmpl(1,:,2)';sAmpl(2,:,2)';sAmpl(1,:,3)';sAmpl(2,:,3)';sAmpl(1,:,4)';sAmpl(2,:,4)'];
cd('/Users/mattiaipem/Documents/IPEM/Projects/Drifting_Metronomes/R_analyses');
writematrix(out2r, 'temp_mpa.xlsx')


%% GED - visualize 

% Load dataset
% load(comp2analyze)

% Grand averages (N=28)
ndyads = 14;
%ndyads = ndyads - 1;

%Initialize
map_gravg = zeros(nchans,nconds); 
powr_gravg = zeros(size(powr{1,1,1},1),nconds);
snr_gravg  = zeros(size(snr{1,1,1},1),nconds);
snr_single = zeros(length(hz),ndyads*2,nconds);
% Compute 
map_temp = squeeze(reshape(map,[],1,nconds,nchans)); %N=28, concatenate partners

for condi = 1:nconds
    
    % compute z-scores
    for subi = 1:ndyads * nsubs
        for chani = 1:nchans 
            map_z(subi,condi,chani) = ( map_temp(subi,condi,chani) - squeeze(mean(map_temp(subi,condi,:))) ) / squeeze(std(map_temp(subi,condi,:)));
        end
    end
    
    map_gravg(:,condi) = squeeze(mean(map_z(:,condi,:),1));
    powr_temp  = [powr{:,1,condi} powr{:,2,condi}]; %reshape cells into array with N=28 () concatenate partners
    powr_gravg(:,condi) = squeeze(mean(powr_temp,2)); %compute grand average
    snr_single(:,:,condi)  = [snr{:,1,condi} snr{:,2,condi}]; %reshape cells into array with N=28 () concatenate partners
    snr_gravg(:,condi) = squeeze(mean(snr_single(:,:,condi),2)); %compute grand average
end

for condi = 1:nconds
    figure(500 + condi), clf
    
    % Topography
    subplot(131);
    topoplotIndie(map_gravg(:,condi),EEG.chanlocs,'numcontour',0,'electrodes','off');
    title('Component activation map') 
    %Power spectrum
    subplot(132)
    plot(hz,powr_gravg(:,condi),'k','linew',1.3)
    set(gca,'xlim',[1 45],'ylim',[0 0.000008])     
    xlabel('Frequency (Hz)'), ylabel('Power (\mu^2)')
    title('Power spectrum (raw)')
    axis square
    % Eigenspectrum
    evals28 = squeeze(reshape(evals(:,:,condi,:),ndyads*2,1,1,[]));
    evalsAvg = mean(evals28,1);
    subplot(133);
    plot(squeeze(evalsAvg),'s-','markerfacecolor','k','linew',2)
    xlabel('Component'), ylabel('Eigenvalue (% explained variance)')
    title('Eigenspectrum')
    axis square
    sgtitle(['Grand-average GED output (N = 28). ' condlabels{condi}])
    
end


figure(600) , clf
for condi = 1:nconds   
    % Topography - grand average per condition
    subplot(2,2,condi)
    topoplotIndie(map_gravg(:,condi),EEG.chanlocs,'numcontour',0,'electrodes','off');
    title(condlabels{condi})
    sgtitle('Component activation map')
    caxis([-.5 1])
    colorbar()
end

figure(601) , clf
% Topography
subplot(211);
topoplotIndie(map_gravg(:,1)-map_gravg(:,2),EEG.chanlocs,'numcontour',0,'electrodes','off');
title('Visual (Coupled - Uncoupled)') 
subplot(212);
topoplotIndie(map_gravg(:,3)-map_gravg(:,4),EEG.chanlocs,'numcontour',0,'electrodes','off');
title('Audio (Coupled - Uncoupled)') 
sgtitle('Subtraction map')